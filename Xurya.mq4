//+------------------------------------------------------------------+
//|                                                        Xurya.mq4 |
//|                                                          Ryan Xu |
//|                                                                  |
//+------------------------------------------------------------------+
#property strict

#define MAGICMA 20000911

#import "MACross.mq4"
#import

#import "BollingerBand.mq4"
#import

//--- input parameters
input float    risk=0.01;
input float    sl_pips = 25;
input int      trailing_pips=30;

int ticket = -1;
string pair = NULL;
double unit_pip = 0;
datetime LastTimeBar=0;
double minLot = 0.01;
double maxLot = 1.00;

//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit(){
   //Grab Prelim Info
   pair = Symbol();
   minLot = MarketInfo(pair, MODE_MINLOT);
   maxLot = MarketInfo(pair, MODE_MAXLOT);
   unit_pip = MathPow(0.1,Digits-1);
   //Check if there is an existing ticket for the symbol
   for(int i=0;i<OrdersTotal();i++){
      if(OrderSelect(i,SELECT_BY_POS,MODE_TRADES)==false){
         ticket = -1;
         break;
      }
      if(OrderSymbol()==Symbol() && OrderMagicNumber()==MAGICMA){
         ticket = OrderTicket();
         break;
      }
   }
   return(INIT_SUCCEEDED);
}
//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason){
   
}
//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick(){
   if(iTime(Symbol(),0,0)!=LastTimeBar){
      LastTimeBar=iTime(pair,0,0);
      ticket=-1;
      
      //Check if there is an existing ticket for the symbol
      for(int i=0;i<OrdersTotal();i++){
         if(OrderSelect(i,SELECT_BY_POS,MODE_TRADES)==false){
            ticket = -1;
            break;
         }
         if(OrderSymbol()==pair && OrderMagicNumber()==MAGICMA){
            ticket = OrderTicket();
            break;
         }
      }
      
      if(ticket==-1){
         EntryAnalysis();
      }else{
         ExitAnalysis();
      }
   }
}

void EntryAnalysis(){
   //Generate Heuristics.
   //int masig = MACrossSignal();
   int sig = -1;
   int squeezeSig = BollingerSqueezeSignal();
   //Insert Squeeze timer to switch trading modes.
   
   if(!squeezeSig){ //TODO: Add squeeze timer to ignore this part.
      //Range Trading.
      sig = BollingerBandSignal() && MACrossSignal();
   }
   
   
   double lot_size = NormalizeDouble(MathMin(MathMax((risk*AccountBalance()/20)/10, minLot), maxLot),2);
   
   //Check if we have money in the account
   if(AccountFreeMargin()<(1000*lot_size)){
      Print("Insufficient Funds. Free Margin = ",AccountFreeMargin());
      return;
   }
   
   //There are no active tickets, here we can do heuristics.
   if(sig==OP_BUY){
      ticket=OrderSend(pair, OP_BUY, lot_size, NormalizeDouble(Ask, Digits), 10*unit_pip, Ask-sl_pips*unit_pip, 0, "Generated by Xurya Bot!",MAGICMA,0,clrLightGreen);
   }else if(sig == OP_SELL){
      ticket=OrderSend(pair, OP_SELL, lot_size, NormalizeDouble(Bid, Digits), 10*unit_pip, Bid+sl_pips*unit_pip, 0, "Generated by Xurya Bot!",MAGICMA,0,clrPurple);
   }
}


void ExitAnalysis(){
   //Get Exit Signals
   int sig = -1;
   int bandSig = BollingerBandSignal();
   int MASig = MACrossSignal();
   
   //Heuristics:
   sig = MASig;

   //If it gets to this point, OrderSelect is already correct and the ticket is not closed.
   int order_type = OrderType();
   if(order_type==OP_BUY){
      if(sig==OP_BUY){
         Alert("Recurring BUY " + ticket);
         OrderModify(ticket, OrderOpenPrice(), OrderStopLoss()-unit_pip, 0, 0, clrAliceBlue);
      }else if(sig==OP_SELL){
         //Opposite Cross, this is a sell.
         Alert("Closing BUY " + ticket);
         OrderClose(ticket, OrderLots(), NormalizeDouble(Bid, Digits), 10*unit_pip, clrRed);
         ticket=-1;
         
         //TODO: Momentum analysis for sell.
         EntryAnalysis();
      }
   }else if(order_type==OP_SELL){
      if(sig==OP_SELL){
         Alert("Recurring SELL " + ticket);
         OrderModify(ticket, OrderOpenPrice(), OrderStopLoss()+unit_pip, 0, 0, clrYellow);
      }else if(sig==OP_BUY){
         //Opposite Cross, this is a buy.
         Alert("Closing SELL " + ticket);
         OrderClose(ticket, OrderLots(), NormalizeDouble(Ask, Digits), 10*unit_pip, clrRed);
         ticket=-1;
         
         //TODO: Momentum analysis for buy.
         EntryAnalysis();
      }
   }
   
   //Trailing Stop
   //------------------------------------------------------------------
   //Tickets can change at this point, recheck for select.
   if(trailing_pips >= 15 && ticket!=-1 && OrderSelect(ticket, SELECT_BY_TICKET) && OrderCloseTime()==0){
      double stpl = OrderStopLoss();
      double open_price = OrderOpenPrice();
      
      order_type = OrderType(); 
      //Check the absolute distance.
      if(order_type==OP_BUY && Bid>open_price){
         double difference = Ask-stpl;
         double amount = unit_pip*trailing_pips;
         if(stpl<open_price){
            difference = Ask-OrderOpenPrice()-5*unit_pip;
         }
         if(difference>amount){
            Alert("Trailing Stop Update " + ticket);
            OrderModify(ticket, OrderOpenPrice(), Ask-amount, 0, 0, clrDarkOrange); 
         }
      }else if(order_type==OP_SELL && Ask<open_price){
         double difference = stpl-Bid;
         double amount = unit_pip*trailing_pips;
         if(stpl>open_price){
            difference = OrderOpenPrice()-Bid-5*unit_pip;
         }
         
         if(difference>amount){
            Alert("Trailing Stop Update " + ticket);
            OrderModify(ticket, OrderOpenPrice(), Bid+amount, 0, 0, clrDarkOrange); 
         }
      }
   }
}
//+------------------------------------------------------------------+
